{"version":3,"sources":["components/search-bar/search-bar.jsx","components/card/card.jsx","components/card-list/card-list.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["SearchBar","props","Container","fluid","className","InputGroup","size","Prepend","Text","id","label","FormControl","placeholder","value","filter","onChange","e","handleChange","MonsterCard","Col","xs","md","lg","xl","Card","Img","alt","src","data","Title","name","email","CardList","Row","d","toLowerCase","includes","map","App","useState","setData","useEffect","a","fetch","response","json","console","log","setFilter","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","basename","process","document","getElementById"],"mappings":"wWAMe,SAASA,EAAUC,GAChC,OACE,cAACC,EAAA,EAAD,CAAWC,MAAM,KAAKC,UAAU,SAAhC,SACE,eAACC,EAAA,EAAD,CAAYC,KAAML,EAAMK,KAAxB,UACE,cAACD,EAAA,EAAWE,QAAZ,UACE,cAACF,EAAA,EAAWG,KAAZ,CAAiBC,GAAG,uBAApB,SAA4CR,EAAMS,UAEpD,cAACC,EAAA,EAAD,CACEC,YAAaX,EAAMW,YACnBC,MAAOZ,EAAMa,OACbC,SAAU,SAACC,GAAD,OAAOf,EAAMgB,aAAaD,W,iCCX/B,SAASE,EAAYjB,GAClC,OACE,cAACkB,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAA/B,SACE,eAACC,EAAA,EAAD,CAAMpB,UAAU,iBAAhB,UACE,cAACoB,EAAA,EAAKC,IAAN,CAAUC,IAAI,UAAUC,IAAG,+BAA0B1B,EAAM2B,KAAKnB,GAArC,4BAC3B,cAACe,EAAA,EAAKK,MAAN,UAAa5B,EAAM2B,KAAKE,OACxB,cAACN,EAAA,EAAKhB,KAAN,UAAYP,EAAM2B,KAAKG,a,MCLhB,SAASC,EAAS/B,GAC/B,OACE,cAACC,EAAA,EAAD,CAAWC,MAAM,KAAKC,UAAU,YAAhC,SACE,cAAC6B,EAAA,EAAD,UACGhC,EAAM2B,KACJd,QAAO,SAACoB,GACP,OAAOA,EAAEJ,KAAKK,cAAcC,SAASnC,EAAMa,OAAOqB,kBAEnDE,KAAI,SAACH,GAAD,OACH,cAAChB,EAAD,CAAwBU,KAAMM,GAAZA,EAAEzB,W,MCVjB,SAAS6B,IAAM,MAEJC,mBAAS,IAFL,mBAErBX,EAFqB,KAEfY,EAFe,KAK5BC,qBAAU,WACR,sBAAC,4BAAAC,EAAA,+EAE0BC,MAAM,+CAFhC,cAESC,EAFT,YAGGJ,EAHH,SAGiBI,EAASC,OAH1B,oFAKGC,QAAQC,IAAR,MALH,yDAAD,KAQC,IAdyB,MAiBAR,mBAAS,IAjBT,mBAiBrBzB,EAjBqB,KAiBbkC,EAjBa,KAmB5B,OACE,sBAAK5C,UAAU,MAAf,UACE,kDACA,cAACJ,EAAD,CACEM,KAAK,KACLI,MAAM,qBACNE,YAAY,kBACZK,aAAc,SAACD,GAAD,OAAOgC,EAAUhC,EAAEiC,OAAOpC,UAE1C,cAACmB,EAAD,CAAUlB,OAAQA,EAAQc,KAAMA,OCjCtC,IAYesB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAeC,SAAUC,2BAAzB,SACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1Bf,M","file":"static/js/main.fa8c2065.chunk.js","sourcesContent":["import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport './search-bar.styles.css';\n\nexport default function SearchBar(props) {\n  return (\n    <Container fluid='md' className='search'>\n      <InputGroup size={props.size}>\n        <InputGroup.Prepend>\n          <InputGroup.Text id='inputGroup-sizing-lg'>{props.label}</InputGroup.Text>\n        </InputGroup.Prepend>\n        <FormControl\n          placeholder={props.placeholder}\n          value={props.filter}\n          onChange={(e) => props.handleChange(e)}\n        />\n      </InputGroup>\n    </Container>\n  );\n}\n","import React from 'react';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\nimport './card.styles.css';\n\nexport default function MonsterCard(props) {\n  return (\n    <Col xs={12} md={6} lg={4} xl={3}>\n      <Card className='card-container'>\n        <Card.Img alt='monster' src={`https://robohash.org/${props.data.id}?set=set3&size=180x180`} />\n        <Card.Title>{props.data.name}</Card.Title>\n        <Card.Text>{props.data.email}</Card.Text>\n      </Card>\n    </Col>\n  );\n}\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport MonsterCard from '../card/card';\nimport './card-list.styles.css';\n\nexport default function CardList(props) {\n  return (\n    <Container fluid='md' className='card-list'>\n      <Row>\n        {props.data\n          .filter((d) => {\n            return d.name.toLowerCase().includes(props.filter.toLowerCase());\n          })\n          .map((d) => (\n            <MonsterCard key={d.id} data={d} />\n          ))}\n      </Row>\n    </Container>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport SearchBar from './components/search-bar/search-bar';\nimport CardList from './components/card-list/card-list';\nimport './App.css';\n\nexport default function App() {\n  // srore our data\n  const [data, setData] = useState([]);\n\n  // get data\n  useEffect(() => {\n    (async () => {\n      try {\n        const response = await fetch('https://jsonplaceholder.typicode.com/users/');\n        setData(await response.json());\n      } catch (e) {\n        console.log(e);\n      }\n    })();\n  }, []);\n\n  // filter\n  const [filter, setFilter] = useState('');\n\n  return (\n    <div className='App'>\n      <h1>Monsters Rolodex</h1>\n      <SearchBar\n        size='lg'\n        label='🕵️'\n        placeholder='Search monsters'\n        handleChange={(e) => setFilter(e.target.value)}\n      />\n      <CardList filter={filter} data={data} />\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}